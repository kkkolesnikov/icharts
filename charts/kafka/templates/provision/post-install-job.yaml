{{- if .Values.provisioning.enabled }}
kind: Job
apiVersion: batch/v1
metadata:
  labels:
    app.kubernetes.io/component: kafka-provisioner
    app.kubernetes.io/part-of: kafka
  name: {{ include "kafka.names.name" . }}
  namespace: {{ include "kafka.namespace" . }}
  annotations:
    helm.sh/hook: post-install,post-upgrade
#    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/component: kafka-provisioning
    spec:
      serviceAccountName: {{ include "kafka.serviceAccountName" . }}
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 0
      containers:
        - name: kafka-provisioner
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
          args:
            - -c
            - |
              echo "Waiting kafka to be up..."
              cmd='nc -v -w 1 {{ include "kafka.broker.name" . }}-headless.{{ include "kafka.namespace" . }} {{ .Values.broker.port }}'
              ${cmd} || while [ $? -ne 0 ]; do sleep 1 && ${cmd}; done
              echo "Up!"
              
              set -e
              echo "Creating topics..."
              
              kafka_topics_commands=(
              {{- $maxReplication := .Values.broker.replicaCount }}
              {{- $server := printf "%s-headless.%s:%d" (include "kafka.broker.name" . ) (include "kafka.namespace" . ) ( .Values.broker.port | int) }}
              {{- $defaultPartitions := .Values.provisioning.default.partitions }}
              {{- $defaultReplication := .Values.provisioning.default.replication }}
              {{- $defaultConfig := .Values.provisioning.default.config }}
              {{- range $topic := .Values.provisioning.topics }}
                "/opt/kafka/bin/kafka-topics.sh \
                    --bootstrap-server {{ $server }} \
                    --create \
                    --if-not-exists \
                    --replication-factor {{ min ( or $topic.replication $defaultReplication ) $maxReplication }} \
                    --partitions {{ or $topic.partitions $defaultPartitions }} \
                    {{- range $name, $value := (merge (or $topic.config dict) $defaultConfig) }}
                    --config {{ $name }}={{ $value }} \
                    {{- end }}
                    --topic {{ $topic.name }}"
              {{- end }}
              )
              
              for topic_cmd in "${kafka_topics_commands[@]}"
              do
              ${topic_cmd}
              done
              
              echo "Topics created"

{{- end }}
